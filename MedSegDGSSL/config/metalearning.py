from .defaults import _C as _C_ORG
import copy
_C = copy.deepcopy(_C_ORG)
from .build import CONFIG_REGISTRY
from yacs.config import CfgNode as CN

###########################
# Add Config definition
###########################

###########################
# Specify the parameters for Mixup
###########################
_C.OPTIM = CN()
_C.OPTIM.NAME = 'adam'
_C.OPTIM.LR = 0.0003
_C.OPTIM.WEIGHT_DECAY = 5e-4
_C.OPTIM.MOMENTUM = 0.9
_C.OPTIM.SGD_DAMPNING = 0
_C.OPTIM.SGD_NESTEROV = False
_C.OPTIM.RMSPROP_ALPHA = 0.99
_C.OPTIM.ADAM_BETA1 = 0.9
_C.OPTIM.ADAM_BETA2 = 0.99
_C.OPTIM.STAGED_LR = False
_C.OPTIM.NEW_LAYERS = ()
_C.OPTIM.BASE_LR_MULT = 0.1
_C.OPTIM.LR_SCHEDULER = 'single_step'
_C.OPTIM.STEPSIZE = (10, )
_C.OPTIM.GAMMA = 0.1
_C.OPTIM.MAX_EPOCH = 10

_C.OPTIM.UPDATE_OPTIM = CN()
_C.OPTIM.UPDATE_OPTIM.NAME = 'adam'
_C.OPTIM.UPDATE_OPTIM.LR = 0.0003
_C.OPTIM.UPDATE_OPTIM.WEIGHT_DECAY = 5e-4
_C.OPTIM.UPDATE_OPTIM.MOMENTUM = 0.9
_C.OPTIM.UPDATE_OPTIM.SGD_DAMPNING = 0
_C.OPTIM.UPDATE_OPTIM.SGD_NESTEROV = False
_C.OPTIM.UPDATE_OPTIM.RMSPROP_ALPHA = 0.99
_C.OPTIM.UPDATE_OPTIM.ADAM_BETA1 = 0.9
_C.OPTIM.UPDATE_OPTIM.ADAM_BETA2 = 0.99
_C.OPTIM.UPDATE_OPTIM.STAGED_LR = False
_C.OPTIM.UPDATE_OPTIM.NEW_LAYERS = ()
_C.OPTIM.UPDATE_OPTIM.BASE_LR_MULT = 0.1
_C.OPTIM.UPDATE_OPTIM.LR_SCHEDULER = 'single_step'
_C.OPTIM.UPDATE_OPTIM.STEPSIZE = (10, )
_C.OPTIM.UPDATE_OPTIM.GAMMA = 0.1
_C.OPTIM.UPDATE_OPTIM.MAX_EPOCH = 10

_C.OPTIM.META_OPTIM = CN()
_C.OPTIM.META_OPTIM.NAME = 'adam'
_C.OPTIM.META_OPTIM.LR = 0.0003
_C.OPTIM.META_OPTIM.WEIGHT_DECAY = 5e-4
_C.OPTIM.META_OPTIM.MOMENTUM = 0.9
_C.OPTIM.META_OPTIM.SGD_DAMPNING = 0
_C.OPTIM.META_OPTIM.SGD_NESTEROV = False
_C.OPTIM.META_OPTIM.RMSPROP_ALPHA = 0.99
_C.OPTIM.META_OPTIM.ADAM_BETA1 = 0.9
_C.OPTIM.META_OPTIM.ADAM_BETA2 = 0.99
_C.OPTIM.META_OPTIM.STAGED_LR = False
_C.OPTIM.META_OPTIM.NEW_LAYERS = ()
_C.OPTIM.META_OPTIM.BASE_LR_MULT = 0.1
_C.OPTIM.META_OPTIM.LR_SCHEDULER = 'single_step'
_C.OPTIM.META_OPTIM.STEPSIZE = (10, )
_C.OPTIM.META_OPTIM.GAMMA = 0.1
_C.OPTIM.META_OPTIM.MAX_EPOCH = 10

_C.DATASET.KEYS = ("data", "seg")


@CONFIG_REGISTRY.register()
def MetaLearning():
    return _C.clone()